{"version":3,"sources":["js/loading-indicator.module.js","js/loading-indicator/loading-indicator-container.directive.js","js/loading-indicator/loading-indicator-inline.directive.js","jdm-loading-indicator.js","js/loading-indicator/loading-indicator.directive.js","js/loading-indicator/loading-indicator.interceptor.js","js/loading-indicator/loading-indicator.provider.js","templates.js"],"names":["angular","module","LoadingIndicator","link","scope","element","attrs","classList","add","directive","restrict","$inject","LoadingIndicatorController","loadingIndicator","vm","this","referenceId","initDirective","indicator","directives","requires","controller","controllerAs","bindToController","isLoading","templateUrl","GlobalLoadingIndicator","GlobalLoadingIndicatorController","LoadingIndicatorInterceptor","$q","$templateCache","request","config","checkRequest","response","checkResponse","responseError","rejection","reject","undefined","setLoadingState","method","get","url","factory","LoadingIndicatorProvider","LoadingIndicatorService","$timeout","$rootScope","service","preLoad","addLoadingState","data","requests","total","push","length","$emit","x","destroy","deleteLoadingState","index","indexOf","splice","_config","isUndefined","position","threshold","setDefaultReferenceId","defaultId","setDefaultPosition","defaultPosition","setThreshold","defaultThreshold","$get","provider","run","put"],"mappings":"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","file":"jdm-loading-indicator.min.js","sourcesContent":["angular.module('jdm.loadingIndicator', [\n    'ngAnimate',\n    'ngAria'\n]);","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicatorContainer', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <div loading-indicator-container></div>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'A',\n            scope: {},\n            link: link\n        }; \n        \n        return directive;\n        \n        function link(scope, element, attrs) {\n            element[0].classList.add('jdm-loading-container');\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicator', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <loading-indicator></loading-indicator>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'E',\n            requires: '^loadingIndicatorContainer',\n            controller: LoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-inline.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function LoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();","angular.module('jdm.loadingIndicator', [\n    'ngAnimate',\n    'ngAria'\n]);\n \n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicatorContainer', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <div loading-indicator-container></div>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'A',\n            scope: {},\n            link: link\n        }; \n        \n        return directive;\n        \n        function link(scope, element, attrs) {\n            element[0].classList.add('jdm-loading-container');\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicator', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <loading-indicator></loading-indicator>\n        //\n        // Creates:\n        //\n        LoadingIndicatorController.$inject = [\"loadingIndicator\"];\n        var directive = {\n            restrict: 'E',\n            requires: '^loadingIndicatorContainer',\n            controller: LoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-inline.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function LoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('globalLoadingIndicator', GlobalLoadingIndicator);\n\n    GlobalLoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function GlobalLoadingIndicator() {\n        // Usage: <global-loading-indicator></global-loading-indicator>\n        //\n        // Creates:\n        //\n        GlobalLoadingIndicatorController.$inject = [\"loadingIndicator\"];\n        var directive = {\n            restrict: 'E',\n            controller: GlobalLoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-global.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function GlobalLoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .factory('loadingIndicatorInterceptor', LoadingIndicatorInterceptor);\n\n    LoadingIndicatorInterceptor.$inject = ['$q', '$templateCache', 'loadingIndicator', ];\n\n    function LoadingIndicatorInterceptor($q, $templateCache, loadingIndicator) {\n        return { \n            request: request,\n            response: response,\n            responseError: responseError \n        };\n\n        // Exposed Functions\n        function request(config) {\n            checkRequest(config);\n            return config;\n        }\n        \n        function response(response) {\n            checkResponse(response);\n            return response;\n        }\n        \n        function responseError(rejection) {\n            checkResponse(rejection);\n            return $q.reject(rejection);\n        }\n        \n        // Internal Functions\n        function checkResponse(response) {\n            if (response !== undefined) {\n                loadingIndicator.setLoadingState(false, response.config);\n            }\n        }\n\n        function checkRequest(config) {\n            // If the request is a get and the request url is not in $templateCache\n            if (config.method === 'GET') {\n                if ($templateCache.get(config.url) === undefined) {\n                    loadingIndicator.setLoadingState(true, config);\n                }\n            } else {\n                loadingIndicator.setLoadingState(true, config);\n            }\n        }  \n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .provider('loadingIndicator', LoadingIndicatorProvider);\n        \n    function LoadingIndicatorProvider() {\n        var referenceId = 0,\n            threshold = 100,\n            position = 'left';\n            \n        this.setDefaultReferenceId = function(defaultId) {\n            referenceId = defaultId;\n        };\n        \n        this.setDefaultPosition = function(defaultPosition) {\n            position = defaultPosition;\n        };\n        \n        this.setThreshold = function(defaultThreshold) {\n            threshold = defaultThreshold;\n        };\n\n        this.$get = LoadingIndicatorService;\n        \n        LoadingIndicatorService.$inject = ['$timeout', '$rootScope'];\n        \n        function LoadingIndicatorService($timeout, $rootScope) {            \n            var service = {\n                directives: {},\n                position: position,\n                initDirective: initDirective,\n                addLoadingState: addLoadingState,\n                deleteLoadingState: deleteLoadingState,\n                setLoadingState: setLoadingState\n            };\n            \n            return service;\n            \n            // Exposed Functions\n            function initDirective(referenceId) {\n                service.directives[referenceId] = service.directives[referenceId] || preLoad(referenceId);\n        \n                return service.directives[referenceId];\n            }\n            \n            function addLoadingState(data) {\n                var directive = service.directives[data.referenceId] || preLoad(data.referenceId);\n\n                if (data.isLoading) {\n                    if (typeof directive.requests === 'undefined') {\n                        directive.total = 0;\n                        directive.requests = [];\n                    }\n\n                    directive.total++;\n                    directive.requests.push(data);\n                    \n                    //Check by referenceID for broadcasts\n                    if(directive.requests.length === 1) {\n                        $rootScope.$emit('loadingIndicator:started', data);\n                    }\n                } else {\n                    for (var x = 0; x < directive.requests.length; x++) {\n                        //if the url's and referenceId's match, delete it\n                        if (directive.requests[x].url === data.url && directive.requests[x].referenceId === data.referenceId) {\n                            //We only want to destroy one request at a time, so break after\n                            directive.requests[x].destroy();\n                            directive.total--;\n                            break;\n                        }\n                    }\n                }\n\n                return data;\n            }\n\n            function deleteLoadingState(data) {\n                var requests = service.directives[data.referenceId].requests;\n                var index = requests.indexOf(data);\n                \n                if (index > -1) {\n                    requests.splice(index, 1);\n                }\n                \n                if(requests.length === 0) {\n                    $rootScope.$emit('loadingIndicator:stopped', data);\n                }\n            }\n            \n            function setLoadingState(isLoading, config) {\n                var _config = config || {};\n                \n                if (angular.isUndefined(isLoading)) {\n                    return;\n                }\n\n                var data = {\n                    isLoading: isLoading,\n                    url: _config.url,\n                    position: _config.position || position,\n                    referenceId: _config.referenceId || referenceId,\n                    destroy: function() {\n                        deleteLoadingState(data);\n                    }\n                };\n                                \n                return addLoadingState(data);\n            }\n            \n            function preLoad(referenceId) {\n                service.directives[referenceId] = {\n                    requests: [],\n                    total: 0\n                };\n                \n                return service.directives[referenceId];\n            }\n        }\n    }\n\n\n})();\nangular.module(\"jdm.loadingIndicator\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"templates/loading-indicator-button.tpl.html\",\"<button class=\\\"loading-container loading-button\\\" ng-disabled=\\\"checkDisabled()\\\" ng-class=\\\"wrapperClasses()\\\"> \\n    <ng-transclude></ng-transclude>\\n    <span class=\\\"loading-item\\\" ng-if=\\\"jdmLoadingService.directives[referenceId].messages.length\\\"> \\n        <i class=\\\"jdm-loading-spinner\\\"></i>\\n    </span>\\n</button>\");\n$templateCache.put(\"templates/loading-indicator-global.tpl.html\",\"<span class=\\\"jdm-loading\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--global\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-inline.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--inline\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--inline\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-progress.tpl.html\",\"\\n<span class=\\\"loading-container\\\"> \\n     <span class=\\\"loading-item\\\"> \\n         <progress max=\\\"{{ jdmLoadingService.directives[referenceId].total }}\\\" value=\\\"{{ jdmLoadingService.directives[referenceId].total - jdmLoadingService.directives[referenceId].messages.length }}\\\"></progress> \\n     </span>\\n</span>\\n\");}]);","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('globalLoadingIndicator', GlobalLoadingIndicator);\n\n    GlobalLoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function GlobalLoadingIndicator() {\n        // Usage: <global-loading-indicator></global-loading-indicator>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'E',\n            controller: GlobalLoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-global.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function GlobalLoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .factory('loadingIndicatorInterceptor', LoadingIndicatorInterceptor);\n\n    LoadingIndicatorInterceptor.$inject = ['$q', '$templateCache', 'loadingIndicator', ];\n\n    function LoadingIndicatorInterceptor($q, $templateCache, loadingIndicator) {\n        return { \n            request: request,\n            response: response,\n            responseError: responseError \n        };\n\n        // Exposed Functions\n        function request(config) {\n            checkRequest(config);\n            return config;\n        }\n        \n        function response(response) {\n            checkResponse(response);\n            return response;\n        }\n        \n        function responseError(rejection) {\n            checkResponse(rejection);\n            return $q.reject(rejection);\n        }\n        \n        // Internal Functions\n        function checkResponse(response) {\n            if (response !== undefined) {\n                loadingIndicator.setLoadingState(false, response.config);\n            }\n        }\n\n        function checkRequest(config) {\n            // If the request is a get and the request url is not in $templateCache\n            if (config.method === 'GET') {\n                if ($templateCache.get(config.url) === undefined) {\n                    loadingIndicator.setLoadingState(true, config);\n                }\n            } else {\n                loadingIndicator.setLoadingState(true, config);\n            }\n        }  \n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .provider('loadingIndicator', LoadingIndicatorProvider);\n        \n    function LoadingIndicatorProvider() {\n        var referenceId = 0,\n            threshold = 100,\n            position = 'left';\n            \n        this.setDefaultReferenceId = function(defaultId) {\n            referenceId = defaultId;\n        };\n        \n        this.setDefaultPosition = function(defaultPosition) {\n            position = defaultPosition;\n        };\n        \n        this.setThreshold = function(defaultThreshold) {\n            threshold = defaultThreshold;\n        };\n\n        this.$get = LoadingIndicatorService;\n        \n        LoadingIndicatorService.$inject = ['$timeout', '$rootScope'];\n        \n        function LoadingIndicatorService($timeout, $rootScope) {            \n            var service = {\n                directives: {},\n                position: position,\n                initDirective: initDirective,\n                addLoadingState: addLoadingState,\n                deleteLoadingState: deleteLoadingState,\n                setLoadingState: setLoadingState\n            };\n            \n            return service;\n            \n            // Exposed Functions\n            function initDirective(referenceId) {\n                service.directives[referenceId] = service.directives[referenceId] || preLoad(referenceId);\n        \n                return service.directives[referenceId];\n            }\n            \n            function addLoadingState(data) {\n                var directive = service.directives[data.referenceId] || preLoad(data.referenceId);\n\n                if (data.isLoading) {\n                    if (typeof directive.requests === 'undefined') {\n                        directive.total = 0;\n                        directive.requests = [];\n                    }\n\n                    directive.total++;\n                    directive.requests.push(data);\n                    \n                    //Check by referenceID for broadcasts\n                    if(directive.requests.length === 1) {\n                        $rootScope.$emit('loadingIndicator:started', data);\n                    }\n                } else {\n                    for (var x = 0; x < directive.requests.length; x++) {\n                        //if the url's and referenceId's match, delete it\n                        if (directive.requests[x].url === data.url && directive.requests[x].referenceId === data.referenceId) {\n                            //We only want to destroy one request at a time, so break after\n                            directive.requests[x].destroy();\n                            directive.total--;\n                            break;\n                        }\n                    }\n                }\n\n                return data;\n            }\n\n            function deleteLoadingState(data) {\n                var requests = service.directives[data.referenceId].requests;\n                var index = requests.indexOf(data);\n                \n                if (index > -1) {\n                    requests.splice(index, 1);\n                }\n                \n                if(requests.length === 0) {\n                    $rootScope.$emit('loadingIndicator:stopped', data);\n                }\n            }\n            \n            function setLoadingState(isLoading, config) {\n                var _config = config || {};\n                \n                if (angular.isUndefined(isLoading)) {\n                    return;\n                }\n\n                var data = {\n                    isLoading: isLoading,\n                    url: _config.url,\n                    position: _config.position || position,\n                    referenceId: _config.referenceId || referenceId,\n                    destroy: function() {\n                        deleteLoadingState(data);\n                    }\n                };\n                                \n                return addLoadingState(data);\n            }\n            \n            function preLoad(referenceId) {\n                service.directives[referenceId] = {\n                    requests: [],\n                    total: 0\n                };\n                \n                return service.directives[referenceId];\n            }\n        }\n    }\n\n\n})();","angular.module(\"jdm.loadingIndicator\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"templates/loading-indicator-button.tpl.html\",\"<button class=\\\"loading-container loading-button\\\" ng-disabled=\\\"checkDisabled()\\\" ng-class=\\\"wrapperClasses()\\\"> \\n    <ng-transclude></ng-transclude>\\n    <span class=\\\"loading-item\\\" ng-if=\\\"jdmLoadingService.directives[referenceId].messages.length\\\"> \\n        <i class=\\\"jdm-loading-spinner\\\"></i>\\n    </span>\\n</button>\");\n$templateCache.put(\"templates/loading-indicator-global.tpl.html\",\"<span class=\\\"jdm-loading\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--global\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-inline.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--inline\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--inline\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-progress.tpl.html\",\"\\n<span class=\\\"loading-container\\\"> \\n     <span class=\\\"loading-item\\\"> \\n         <progress max=\\\"{{ jdmLoadingService.directives[referenceId].total }}\\\" value=\\\"{{ jdmLoadingService.directives[referenceId].total - jdmLoadingService.directives[referenceId].messages.length }}\\\"></progress> \\n     </span>\\n</span>\\n\");}]);"],"sourceRoot":"/source/"}