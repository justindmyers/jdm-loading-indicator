{"version":3,"sources":["js/loading-indicator.module.js","js/loading-indicator/loading-indicator-button.directive.js","jdm-loading-indicator.js","js/loading-indicator/loading-indicator-container.directive.js","js/loading-indicator/loading-indicator-inline.directive.js","js/loading-indicator/loading-indicator.directive.js","js/loading-indicator/loading-indicator.interceptor.js","js/loading-indicator/loading-indicator.provider.js","templates.js"],"names":["angular","module","LoadingIndicatorButton","LoadingIndicatorButtonController","loadingIndicator","vm","this","$onInit","referenceId","initDirective","buttonClasses","indicator","directives","checkDisabled","buttonDisabled","requests","length","disableOnPendingRequest","wrapperClasses","classes","split","forEach","classname","isDarkTheme","isLoading","isDefined","indicatorPosition","position","$inject","directive","restrict","controller","controllerAs","bindToController","scope","transclude","templateUrl","LoadingIndicator","link","element","attrs","classList","add","LoadingIndicatorController","requires","GlobalLoadingIndicator","GlobalLoadingIndicatorController","LoadingIndicatorInterceptor","$q","$templateCache","$timeout","request","config","checkRequest","response","checkResponse","responseError","rejection","reject","undefined","setLoadingState","x","waitingRequests","splice","method","get","url","waitForThreshold","push","threshold","factory","LoadingIndicatorProvider","LoadingIndicatorService","$rootScope","service","preLoad","addLoadingState","data","total","$emit","destroy","deleteLoadingState","index","indexOf","_config","isUndefined","callTimeout","setDefaultReferenceId","defaultId","setDefaultPosition","defaultPosition","setThreshold","defaultThreshold","$get","provider","run","put"],"mappings":"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","file":"jdm-loading-indicator.min.js","sourcesContent":["angular.module('jdm.loadingIndicator', [\r\n    'ngAnimate',\r\n    'ngAria'\r\n]);"," (function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('loadingIndicatorButton', LoadingIndicatorButton);\r\n\r\n    LoadingIndicatorButton.$inject = ['loadingIndicator'];\r\n    \r\n    function LoadingIndicatorButton() {\r\n        // Usage: <global-loading-indicator></global-loading-indicator>\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            restrict: 'E',\r\n            controller: LoadingIndicatorButtonController,\r\n            controllerAs: 'loadingIndicatorButton', \r\n            bindToController: {\r\n                buttonClasses: '@',\r\n                referenceId: '@',\r\n                isLoading: '<',\r\n                indicatorPosition: '@',\r\n                disableOnPendingRequest: '@',\r\n                buttonDisabled: '<',\r\n                isDarkTheme: '@'\r\n            },\r\n            scope: {},\r\n            transclude: true,\r\n            templateUrl: 'templates/loading-indicator-button.tpl.html',\r\n        }; \r\n        \r\n        return directive;\r\n             \r\n        /* @ngInject */\r\n        function LoadingIndicatorButtonController (loadingIndicator) {\r\n            var vm = this;\r\n\r\n            vm.$onInit = function() {\r\n                var referenceId = vm.referenceId || 0;\r\n\r\n                loadingIndicator.initDirective(referenceId);\r\n\r\n                vm.buttonClasses = vm.buttonClasses || '';\r\n                vm.indicator = loadingIndicator.directives[referenceId];\r\n            };\r\n\r\n            vm.checkDisabled = function() {                \r\n                if(vm.buttonDisabled) {\r\n                    return true;\r\n                }\r\n                \r\n                if(vm.indicator.requests.length && vm.disableOnPendingRequest) {\r\n                    return true;\r\n                }                       \r\n            };\r\n\r\n            vm.wrapperClasses = function() {\r\n                var classes = {};\r\n\r\n                vm.buttonClasses.split(' ').forEach(function(classname) {\r\n                    classes[classname] = true;\r\n                });\r\n\r\n                if(vm.isDarkTheme) {\r\n                    classes['jdm-loading-indicator-button--dark'] = true;\r\n                }\r\n\r\n                if(vm.indicator.requests.length || vm.isLoading) {\r\n                    classes['jdm-loading-indicator-button--loading'] = true;\r\n                }\r\n\r\n                if(vm.indicator.requests.length && vm.disableOnPendingRequest || vm.buttonDisabled) {\r\n                    classes['disabled'] = true;\r\n                }\r\n                \r\n                if(angular.isDefined(vm.indicatorPosition)) {\r\n                    classes['jdm-loading-indicator-button--loading-' + vm.indicatorPosition] = true;\r\n                } else {\r\n                    classes['jdm-loading-indicator-button--loading-' + loadingIndicator.position] = true;\r\n                }\r\n                \r\n                return classes;\r\n            };\r\n        }\r\n    }\r\n})();","angular.module('jdm.loadingIndicator', [\r\n    'ngAnimate',\r\n    'ngAria'\r\n]);\n (function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('loadingIndicatorButton', LoadingIndicatorButton);\r\n\r\n    LoadingIndicatorButton.$inject = ['loadingIndicator'];\r\n    \r\n    function LoadingIndicatorButton() {\r\n        // Usage: <global-loading-indicator></global-loading-indicator>\r\n        //\r\n        // Creates:\r\n        //\r\n        LoadingIndicatorButtonController.$inject = [\"loadingIndicator\"];\r\n        var directive = {\r\n            restrict: 'E',\r\n            controller: LoadingIndicatorButtonController,\r\n            controllerAs: 'loadingIndicatorButton', \r\n            bindToController: {\r\n                buttonClasses: '@',\r\n                referenceId: '@',\r\n                isLoading: '<',\r\n                indicatorPosition: '@',\r\n                disableOnPendingRequest: '@',\r\n                buttonDisabled: '<',\r\n                isDarkTheme: '@'\r\n            },\r\n            scope: {},\r\n            transclude: true,\r\n            templateUrl: 'templates/loading-indicator-button.tpl.html',\r\n        }; \r\n        \r\n        return directive;\r\n             \r\n        /* @ngInject */\r\n        function LoadingIndicatorButtonController (loadingIndicator) {\r\n            var vm = this;\r\n\r\n            vm.$onInit = function() {\r\n                var referenceId = vm.referenceId || 0;\r\n\r\n                loadingIndicator.initDirective(referenceId);\r\n\r\n                vm.buttonClasses = vm.buttonClasses || '';\r\n                vm.indicator = loadingIndicator.directives[referenceId];\r\n            };\r\n\r\n            vm.checkDisabled = function() {                \r\n                if(vm.buttonDisabled) {\r\n                    return true;\r\n                }\r\n                \r\n                if(vm.indicator.requests.length && vm.disableOnPendingRequest) {\r\n                    return true;\r\n                }                       \r\n            };\r\n\r\n            vm.wrapperClasses = function() {\r\n                var classes = {};\r\n\r\n                vm.buttonClasses.split(' ').forEach(function(classname) {\r\n                    classes[classname] = true;\r\n                });\r\n\r\n                if(vm.isDarkTheme) {\r\n                    classes['jdm-loading-indicator-button--dark'] = true;\r\n                }\r\n\r\n                if(vm.indicator.requests.length || vm.isLoading) {\r\n                    classes['jdm-loading-indicator-button--loading'] = true;\r\n                }\r\n\r\n                if(vm.indicator.requests.length && vm.disableOnPendingRequest || vm.buttonDisabled) {\r\n                    classes['disabled'] = true;\r\n                }\r\n                \r\n                if(angular.isDefined(vm.indicatorPosition)) {\r\n                    classes['jdm-loading-indicator-button--loading-' + vm.indicatorPosition] = true;\r\n                } else {\r\n                    classes['jdm-loading-indicator-button--loading-' + loadingIndicator.position] = true;\r\n                }\r\n                \r\n                return classes;\r\n            };\r\n        }\r\n    }\r\n})();\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('loadingIndicatorContainer', LoadingIndicator);\r\n\r\n    LoadingIndicator.$inject = ['loadingIndicator'];\r\n    \r\n    function LoadingIndicator() {\r\n        // Usage: <div loading-indicator-container></div>\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            restrict: 'A',\r\n            scope: {},\r\n            link: link\r\n        }; \r\n        \r\n        return directive;\r\n        \r\n        function link(scope, element, attrs) {\r\n            element[0].classList.add('jdm-loading-container');\r\n        }\r\n    }\r\n})();\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('loadingIndicator', LoadingIndicator);\r\n\r\n    LoadingIndicator.$inject = ['loadingIndicator'];\r\n    \r\n    function LoadingIndicator() {\r\n        // Usage: <loading-indicator></loading-indicator>\r\n        //\r\n        // Creates:\r\n        //\r\n        LoadingIndicatorController.$inject = [\"loadingIndicator\"];\r\n        var directive = {\r\n            restrict: 'E',\r\n            requires: '^loadingIndicatorContainer',\r\n            controller: LoadingIndicatorController,\r\n            controllerAs: 'loadingIndicator', \r\n            bindToController: {\r\n                referenceId: '@',\r\n                isLoading: '='\r\n            },\r\n            scope: {},\r\n            templateUrl: 'templates/loading-indicator-inline.tpl.html',\r\n        }; \r\n        \r\n        return directive;\r\n             \r\n        /* @ngInject */\r\n        function LoadingIndicatorController (loadingIndicator) {\r\n            var vm = this;\r\n\r\n            vm.$onInit = function() {\r\n                var referenceId = vm.referenceId || 0;\r\n\r\n                loadingIndicator.initDirective(referenceId);\r\n\r\n                vm.indicator = loadingIndicator.directives[referenceId];\r\n            };\r\n        }\r\n    }\r\n})();\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('globalLoadingIndicator', GlobalLoadingIndicator);\r\n\r\n    GlobalLoadingIndicator.$inject = ['loadingIndicator'];\r\n    \r\n    function GlobalLoadingIndicator() {\r\n        // Usage: <global-loading-indicator></global-loading-indicator>\r\n        //\r\n        // Creates:\r\n        //\r\n        GlobalLoadingIndicatorController.$inject = [\"loadingIndicator\"];\r\n        var directive = {\r\n            restrict: 'E',\r\n            controller: GlobalLoadingIndicatorController,\r\n            controllerAs: 'loadingIndicator', \r\n            bindToController: {\r\n                referenceId: '@',\r\n                isLoading: '='\r\n            },\r\n            scope: {},\r\n            templateUrl: 'templates/loading-indicator-global.tpl.html',\r\n        }; \r\n        \r\n        return directive;\r\n             \r\n        /* @ngInject */\r\n        function GlobalLoadingIndicatorController (loadingIndicator) {\r\n            var vm = this;\r\n\r\n            vm.$onInit = function() {\r\n                var referenceId = vm.referenceId || 0;\r\n\r\n                loadingIndicator.initDirective(referenceId);\r\n                \r\n                vm.indicator = loadingIndicator.directives[referenceId];\r\n            }\r\n        }\r\n    }\r\n})();\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .factory('loadingIndicatorInterceptor', LoadingIndicatorInterceptor);\r\n\r\n    LoadingIndicatorInterceptor.$inject = ['$q', '$templateCache', 'loadingIndicator', '$timeout'];\r\n\r\n    function LoadingIndicatorInterceptor($q, $templateCache, loadingIndicator, $timeout) {\r\n        var waitingRequests = [];\r\n\r\n        return { \r\n            request: request,\r\n            response: response,\r\n            responseError: responseError \r\n        };\r\n\r\n        // Exposed Functions\r\n        function request(config) {\r\n            checkRequest(config);\r\n            return config;\r\n        }\r\n        \r\n        function response(response) {\r\n            checkResponse(response);\r\n            return response;\r\n        }\r\n        \r\n        function responseError(rejection) {\r\n            checkResponse(rejection);\r\n            return $q.reject(rejection);\r\n        }\r\n        \r\n        // Internal Functions\r\n        function checkResponse(response) {\r\n            if (response !== undefined) {\r\n                loadingIndicator.setLoadingState(false, response.config);\r\n\r\n                for(var x = waitingRequests.length - 1; x >= 0 ; x--) {\r\n                    if(waitingRequests[x] === response.config) {\r\n                        waitingRequests.splice(x, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkRequest(config) {\r\n            // If the request is a get and the request url is not in $templateCache\r\n            if (config.method === 'GET' || config.method === 'JSONP') {\r\n                if ($templateCache.get(config.url) === undefined) {\r\n                    waitForThreshold(config);\r\n                }\r\n            } else {\r\n                waitForThreshold(config);\r\n            }\r\n        }\r\n\r\n        function waitForThreshold(config) {\r\n            waitingRequests.push(config);\r\n\r\n            $timeout(function() {\r\n                for(var x = 0; x < waitingRequests.length; x++) {\r\n                    if(config === waitingRequests[x]) {\r\n                        loadingIndicator.setLoadingState(true, config);\r\n                    }\r\n                }\r\n            }, loadingIndicator.threshold);\r\n        }\r\n    }\r\n})();\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .provider('loadingIndicator', LoadingIndicatorProvider);\r\n        \r\n    function LoadingIndicatorProvider() {\r\n        var referenceId = 0,\r\n            threshold = 250,\r\n            position = 'left';\r\n            \r\n        this.setDefaultReferenceId = function(defaultId) {\r\n            referenceId = defaultId;\r\n        };\r\n        \r\n        this.setDefaultPosition = function(defaultPosition) {\r\n            position = defaultPosition;\r\n        };\r\n        \r\n        this.setThreshold = function(defaultThreshold) {\r\n            threshold = defaultThreshold;\r\n        };\r\n\r\n        this.$get = LoadingIndicatorService;\r\n        \r\n        LoadingIndicatorService.$inject = ['$timeout', '$rootScope'];\r\n        \r\n        function LoadingIndicatorService($timeout, $rootScope) {            \r\n            var service = {\r\n                directives: {},\r\n                position: position,\r\n                threshold: threshold,\r\n                initDirective: initDirective,\r\n                addLoadingState: addLoadingState,\r\n                deleteLoadingState: deleteLoadingState,\r\n                setLoadingState: setLoadingState\r\n            };\r\n            \r\n            return service;\r\n            \r\n            // Exposed Functions\r\n            function initDirective(referenceId) {\r\n                service.directives[referenceId] = service.directives[referenceId] || preLoad(referenceId);\r\n        \r\n                return service.directives[referenceId];\r\n            }\r\n            \r\n            function addLoadingState(data) {\r\n                var directive = service.directives[data.referenceId] || preLoad(data.referenceId);\r\n\r\n                if (data.isLoading) {\r\n                    if (typeof directive.requests === 'undefined') {\r\n                        directive.total = 0;\r\n                        directive.requests = [];\r\n                    }\r\n\r\n                    directive.total++;\r\n                    directive.requests.push(data);\r\n                    \r\n                    //Check by referenceID for broadcasts\r\n                    if(directive.requests.length === 1) {\r\n                        $rootScope.$emit('loadingIndicator:started', data);\r\n                    }\r\n                } else {\r\n                    for (var x = 0; x < directive.requests.length; x++) {\r\n                        //if the url's and referenceId's match, delete it\r\n                        if (directive.requests[x].url === data.url && directive.requests[x].referenceId === data.referenceId) {\r\n                            //We only want to destroy one request at a time, so break after\r\n                            directive.requests[x].destroy();\r\n                            directive.total--;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            function deleteLoadingState(data) {\r\n                var requests = service.directives[data.referenceId].requests;\r\n                var index = requests.indexOf(data);\r\n                \r\n                if (index > -1) {\r\n                    requests.splice(index, 1);\r\n                }\r\n                \r\n                if(requests.length === 0) {\r\n                    $rootScope.$emit('loadingIndicator:stopped', data);\r\n                }\r\n            }\r\n            \r\n            function setLoadingState(isLoading, config) {\r\n                var _config = config || {};\r\n                \r\n                if (angular.isUndefined(isLoading)) {\r\n                    return;\r\n                }\r\n\r\n                var data = {\r\n                    isLoading: isLoading,\r\n                    url: _config.url,\r\n                    position: _config.position || position,\r\n                    referenceId: _config.referenceId || referenceId,\r\n                    destroy: function() {\r\n                        deleteLoadingState(data);\r\n                    },\r\n                    callTimeout: function() {\r\n                        // Go ahead and remove the call if it passes a certain timeout\r\n                        $timeout(function() {\r\n                            deleteLoadingState(data);\r\n                        }, 10000);\r\n                    }\r\n                };\r\n\r\n                data.callTimeout();\r\n\r\n                return addLoadingState(data);\r\n            }\r\n            \r\n            function preLoad(referenceId) {\r\n                service.directives[referenceId] = {\r\n                    requests: [],\r\n                    total: 0\r\n                };\r\n                \r\n                return service.directives[referenceId];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n})();\nangular.module(\"jdm.loadingIndicator\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"templates/loading-indicator-button.tpl.html\",\"<button type=\\\"button\\\" class=\\\"jdm-loading-container jdm-loading-indicator-button\\\" ng-disabled=\\\"loadingIndicatorButton.checkDisabled()\\\" ng-class=\\\"loadingIndicatorButton.wrapperClasses()\\\"> \\r\\n    <span class=\\\"jdm-loading-indicator-button__wrapper\\\">\\r\\n        <span class=\\\"jdm-loading jdm-loading--button\\\" ng-if=\\\"loadingIndicatorButton.isLoading || loadingIndicatorButton.indicator.requests.length\\\"> \\r\\n            <i class=\\\"jdm-loading__spinner jdm-loading__spinner--button\\\"></i>\\r\\n        </span>\\r\\n        \\r\\n        <span class=\\\"jdm-loading-indicator-button__content\\\" ng-transclude></span>\\r\\n    </span>\\r\\n</button>\");\n$templateCache.put(\"templates/loading-indicator-global.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--global\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\r\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--global\\\"></i> \\r\\n</span>\");\n$templateCache.put(\"templates/loading-indicator-inline.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--inline\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\r\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--inline\\\"></i> \\r\\n</span>\");\n$templateCache.put(\"templates/loading-indicator-progress.tpl.html\",\"<span class=\\\"loading-container\\\"> \\r\\n     <span class=\\\"loading-item\\\"> \\r\\n         <progress max=\\\"{{ jdmLoadingService.directives[referenceId].total }}\\\" value=\\\"{{ jdmLoadingService.directives[referenceId].total - jdmLoadingService.directives[referenceId].messages.length }}\\\"></progress> \\r\\n     </span>\\r\\n</span>\\r\\n\");}]);","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('loadingIndicatorContainer', LoadingIndicator);\r\n\r\n    LoadingIndicator.$inject = ['loadingIndicator'];\r\n    \r\n    function LoadingIndicator() {\r\n        // Usage: <div loading-indicator-container></div>\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            restrict: 'A',\r\n            scope: {},\r\n            link: link\r\n        }; \r\n        \r\n        return directive;\r\n        \r\n        function link(scope, element, attrs) {\r\n            element[0].classList.add('jdm-loading-container');\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('loadingIndicator', LoadingIndicator);\r\n\r\n    LoadingIndicator.$inject = ['loadingIndicator'];\r\n    \r\n    function LoadingIndicator() {\r\n        // Usage: <loading-indicator></loading-indicator>\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            restrict: 'E',\r\n            requires: '^loadingIndicatorContainer',\r\n            controller: LoadingIndicatorController,\r\n            controllerAs: 'loadingIndicator', \r\n            bindToController: {\r\n                referenceId: '@',\r\n                isLoading: '='\r\n            },\r\n            scope: {},\r\n            templateUrl: 'templates/loading-indicator-inline.tpl.html',\r\n        }; \r\n        \r\n        return directive;\r\n             \r\n        /* @ngInject */\r\n        function LoadingIndicatorController (loadingIndicator) {\r\n            var vm = this;\r\n\r\n            vm.$onInit = function() {\r\n                var referenceId = vm.referenceId || 0;\r\n\r\n                loadingIndicator.initDirective(referenceId);\r\n\r\n                vm.indicator = loadingIndicator.directives[referenceId];\r\n            };\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .directive('globalLoadingIndicator', GlobalLoadingIndicator);\r\n\r\n    GlobalLoadingIndicator.$inject = ['loadingIndicator'];\r\n    \r\n    function GlobalLoadingIndicator() {\r\n        // Usage: <global-loading-indicator></global-loading-indicator>\r\n        //\r\n        // Creates:\r\n        //\r\n        var directive = {\r\n            restrict: 'E',\r\n            controller: GlobalLoadingIndicatorController,\r\n            controllerAs: 'loadingIndicator', \r\n            bindToController: {\r\n                referenceId: '@',\r\n                isLoading: '='\r\n            },\r\n            scope: {},\r\n            templateUrl: 'templates/loading-indicator-global.tpl.html',\r\n        }; \r\n        \r\n        return directive;\r\n             \r\n        /* @ngInject */\r\n        function GlobalLoadingIndicatorController (loadingIndicator) {\r\n            var vm = this;\r\n\r\n            vm.$onInit = function() {\r\n                var referenceId = vm.referenceId || 0;\r\n\r\n                loadingIndicator.initDirective(referenceId);\r\n                \r\n                vm.indicator = loadingIndicator.directives[referenceId];\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .factory('loadingIndicatorInterceptor', LoadingIndicatorInterceptor);\r\n\r\n    LoadingIndicatorInterceptor.$inject = ['$q', '$templateCache', 'loadingIndicator', '$timeout'];\r\n\r\n    function LoadingIndicatorInterceptor($q, $templateCache, loadingIndicator, $timeout) {\r\n        var waitingRequests = [];\r\n\r\n        return { \r\n            request: request,\r\n            response: response,\r\n            responseError: responseError \r\n        };\r\n\r\n        // Exposed Functions\r\n        function request(config) {\r\n            checkRequest(config);\r\n            return config;\r\n        }\r\n        \r\n        function response(response) {\r\n            checkResponse(response);\r\n            return response;\r\n        }\r\n        \r\n        function responseError(rejection) {\r\n            checkResponse(rejection);\r\n            return $q.reject(rejection);\r\n        }\r\n        \r\n        // Internal Functions\r\n        function checkResponse(response) {\r\n            if (response !== undefined) {\r\n                loadingIndicator.setLoadingState(false, response.config);\r\n\r\n                for(var x = waitingRequests.length - 1; x >= 0 ; x--) {\r\n                    if(waitingRequests[x] === response.config) {\r\n                        waitingRequests.splice(x, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkRequest(config) {\r\n            // If the request is a get and the request url is not in $templateCache\r\n            if (config.method === 'GET' || config.method === 'JSONP') {\r\n                if ($templateCache.get(config.url) === undefined) {\r\n                    waitForThreshold(config);\r\n                }\r\n            } else {\r\n                waitForThreshold(config);\r\n            }\r\n        }\r\n\r\n        function waitForThreshold(config) {\r\n            waitingRequests.push(config);\r\n\r\n            $timeout(function() {\r\n                for(var x = 0; x < waitingRequests.length; x++) {\r\n                    if(config === waitingRequests[x]) {\r\n                        loadingIndicator.setLoadingState(true, config);\r\n                    }\r\n                }\r\n            }, loadingIndicator.threshold);\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('jdm.loadingIndicator')\r\n        .provider('loadingIndicator', LoadingIndicatorProvider);\r\n        \r\n    function LoadingIndicatorProvider() {\r\n        var referenceId = 0,\r\n            threshold = 250,\r\n            position = 'left';\r\n            \r\n        this.setDefaultReferenceId = function(defaultId) {\r\n            referenceId = defaultId;\r\n        };\r\n        \r\n        this.setDefaultPosition = function(defaultPosition) {\r\n            position = defaultPosition;\r\n        };\r\n        \r\n        this.setThreshold = function(defaultThreshold) {\r\n            threshold = defaultThreshold;\r\n        };\r\n\r\n        this.$get = LoadingIndicatorService;\r\n        \r\n        LoadingIndicatorService.$inject = ['$timeout', '$rootScope'];\r\n        \r\n        function LoadingIndicatorService($timeout, $rootScope) {            \r\n            var service = {\r\n                directives: {},\r\n                position: position,\r\n                threshold: threshold,\r\n                initDirective: initDirective,\r\n                addLoadingState: addLoadingState,\r\n                deleteLoadingState: deleteLoadingState,\r\n                setLoadingState: setLoadingState\r\n            };\r\n            \r\n            return service;\r\n            \r\n            // Exposed Functions\r\n            function initDirective(referenceId) {\r\n                service.directives[referenceId] = service.directives[referenceId] || preLoad(referenceId);\r\n        \r\n                return service.directives[referenceId];\r\n            }\r\n            \r\n            function addLoadingState(data) {\r\n                var directive = service.directives[data.referenceId] || preLoad(data.referenceId);\r\n\r\n                if (data.isLoading) {\r\n                    if (typeof directive.requests === 'undefined') {\r\n                        directive.total = 0;\r\n                        directive.requests = [];\r\n                    }\r\n\r\n                    directive.total++;\r\n                    directive.requests.push(data);\r\n                    \r\n                    //Check by referenceID for broadcasts\r\n                    if(directive.requests.length === 1) {\r\n                        $rootScope.$emit('loadingIndicator:started', data);\r\n                    }\r\n                } else {\r\n                    for (var x = 0; x < directive.requests.length; x++) {\r\n                        //if the url's and referenceId's match, delete it\r\n                        if (directive.requests[x].url === data.url && directive.requests[x].referenceId === data.referenceId) {\r\n                            //We only want to destroy one request at a time, so break after\r\n                            directive.requests[x].destroy();\r\n                            directive.total--;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return data;\r\n            }\r\n\r\n            function deleteLoadingState(data) {\r\n                var requests = service.directives[data.referenceId].requests;\r\n                var index = requests.indexOf(data);\r\n                \r\n                if (index > -1) {\r\n                    requests.splice(index, 1);\r\n                }\r\n                \r\n                if(requests.length === 0) {\r\n                    $rootScope.$emit('loadingIndicator:stopped', data);\r\n                }\r\n            }\r\n            \r\n            function setLoadingState(isLoading, config) {\r\n                var _config = config || {};\r\n                \r\n                if (angular.isUndefined(isLoading)) {\r\n                    return;\r\n                }\r\n\r\n                var data = {\r\n                    isLoading: isLoading,\r\n                    url: _config.url,\r\n                    position: _config.position || position,\r\n                    referenceId: _config.referenceId || referenceId,\r\n                    destroy: function() {\r\n                        deleteLoadingState(data);\r\n                    },\r\n                    callTimeout: function() {\r\n                        // Go ahead and remove the call if it passes a certain timeout\r\n                        $timeout(function() {\r\n                            deleteLoadingState(data);\r\n                        }, 10000);\r\n                    }\r\n                };\r\n\r\n                data.callTimeout();\r\n\r\n                return addLoadingState(data);\r\n            }\r\n            \r\n            function preLoad(referenceId) {\r\n                service.directives[referenceId] = {\r\n                    requests: [],\r\n                    total: 0\r\n                };\r\n                \r\n                return service.directives[referenceId];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n})();","angular.module(\"jdm.loadingIndicator\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"templates/loading-indicator-button.tpl.html\",\"<button type=\\\"button\\\" class=\\\"jdm-loading-container jdm-loading-indicator-button\\\" ng-disabled=\\\"loadingIndicatorButton.checkDisabled()\\\" ng-class=\\\"loadingIndicatorButton.wrapperClasses()\\\"> \\r\\n    <span class=\\\"jdm-loading-indicator-button__wrapper\\\">\\r\\n        <span class=\\\"jdm-loading jdm-loading--button\\\" ng-if=\\\"loadingIndicatorButton.isLoading || loadingIndicatorButton.indicator.requests.length\\\"> \\r\\n            <i class=\\\"jdm-loading__spinner jdm-loading__spinner--button\\\"></i>\\r\\n        </span>\\r\\n        \\r\\n        <span class=\\\"jdm-loading-indicator-button__content\\\" ng-transclude></span>\\r\\n    </span>\\r\\n</button>\");\n$templateCache.put(\"templates/loading-indicator-global.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--global\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\r\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--global\\\"></i> \\r\\n</span>\");\n$templateCache.put(\"templates/loading-indicator-inline.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--inline\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\r\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--inline\\\"></i> \\r\\n</span>\");\n$templateCache.put(\"templates/loading-indicator-progress.tpl.html\",\"<span class=\\\"loading-container\\\"> \\r\\n     <span class=\\\"loading-item\\\"> \\r\\n         <progress max=\\\"{{ jdmLoadingService.directives[referenceId].total }}\\\" value=\\\"{{ jdmLoadingService.directives[referenceId].total - jdmLoadingService.directives[referenceId].messages.length }}\\\"></progress> \\r\\n     </span>\\r\\n</span>\\r\\n\");}]);"]}