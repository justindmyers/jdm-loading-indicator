{"version":3,"sources":["js/loading-indicator.module.js","js/loading-indicator/loading-indicator-button.directive.js","jdm-loading-indicator.js","js/loading-indicator/loading-indicator-container.directive.js","js/loading-indicator/loading-indicator-inline.directive.js","js/loading-indicator/loading-indicator.directive.js","js/loading-indicator/loading-indicator.interceptor.js","js/loading-indicator/loading-indicator.provider.js","templates.js"],"names":["angular","module","LoadingIndicatorButton","LoadingIndicatorButtonController","loadingIndicator","vm","this","referenceId","initDirective","indicator","directives","checkDisabled","buttonDisabled","requests","length","disableOnPendingRequest","wrapperClasses","classes","isDarkTheme","isLoading","isDefined","indicatorPosition","position","$inject","directive","restrict","controller","controllerAs","bindToController","scope","transclude","templateUrl","LoadingIndicator","link","element","attrs","classList","add","LoadingIndicatorController","requires","GlobalLoadingIndicator","GlobalLoadingIndicatorController","LoadingIndicatorInterceptor","$q","$templateCache","request","config","checkRequest","response","checkResponse","responseError","rejection","reject","undefined","setLoadingState","method","get","url","factory","LoadingIndicatorProvider","LoadingIndicatorService","$timeout","$rootScope","service","preLoad","addLoadingState","data","total","push","$emit","x","destroy","deleteLoadingState","index","indexOf","splice","_config","isUndefined","threshold","setDefaultReferenceId","defaultId","setDefaultPosition","defaultPosition","setThreshold","defaultThreshold","$get","provider","run","put"],"mappings":"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","file":"jdm-loading-indicator.min.js","sourcesContent":["angular.module('jdm.loadingIndicator', [\n    'ngAnimate',\n    'ngAria'\n]);"," (function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicatorButton', LoadingIndicatorButton);\n\n    LoadingIndicatorButton.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicatorButton() {\n        // Usage: <global-loading-indicator></global-loading-indicator>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'E',\n            controller: LoadingIndicatorButtonController,\n            controllerAs: 'loadingIndicatorButton', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '<',\n                indicatorPosition: '@',\n                disableOnPendingRequest: '@',\n                buttonDisabled: '<',\n                isDarkTheme: '@'\n            },\n            scope: {},\n            transclude: true,\n            templateUrl: 'templates/loading-indicator-button.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function LoadingIndicatorButtonController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n\n            vm.checkDisabled = function() {                \n                if(vm.buttonDisabled) {\n                    return true;\n                }\n                \n                if(vm.indicator.requests.length && vm.disableOnPendingRequest) {\n                    return true;\n                }                       \n            };\n\n            vm.wrapperClasses = function() {\n                var classes = {};\n\n                if(vm.isDarkTheme) {\n                    classes['jdm-loading-indicator-button--dark'] = true;\n                }\n\n                if(vm.indicator.requests.length || vm.isLoading) {\n                    classes['jdm-loading-indicator-button--loading'] = true;\n                }\n\n                if(vm.indicator.requests.length && vm.disableOnPendingRequest || vm.buttonDisabled) {\n                    classes['disabled'] = true;\n                }\n                \n                if(angular.isDefined(vm.indicatorPosition)) {\n                    classes['jdm-loading-indicator-button--loading-' + vm.indicatorPosition] = true;\n                } else {\n                    classes['jdm-loading-indicator-button--loading-' + loadingIndicator.position] = true;\n                }\n                \n                return classes;\n            };\n        }\n    }\n})();","angular.module('jdm.loadingIndicator', [\n    'ngAnimate',\n    'ngAria'\n]);\n (function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicatorButton', LoadingIndicatorButton);\n\n    LoadingIndicatorButton.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicatorButton() {\n        // Usage: <global-loading-indicator></global-loading-indicator>\n        //\n        // Creates:\n        //\n        LoadingIndicatorButtonController.$inject = [\"loadingIndicator\"];\n        var directive = {\n            restrict: 'E',\n            controller: LoadingIndicatorButtonController,\n            controllerAs: 'loadingIndicatorButton', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '<',\n                indicatorPosition: '@',\n                disableOnPendingRequest: '@',\n                buttonDisabled: '<',\n                isDarkTheme: '@'\n            },\n            scope: {},\n            transclude: true,\n            templateUrl: 'templates/loading-indicator-button.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function LoadingIndicatorButtonController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n\n            vm.checkDisabled = function() {                \n                if(vm.buttonDisabled) {\n                    return true;\n                }\n                \n                if(vm.indicator.requests.length && vm.disableOnPendingRequest) {\n                    return true;\n                }                       \n            };\n\n            vm.wrapperClasses = function() {\n                var classes = {};\n\n                if(vm.isDarkTheme) {\n                    classes['jdm-loading-indicator-button--dark'] = true;\n                }\n\n                if(vm.indicator.requests.length || vm.isLoading) {\n                    classes['jdm-loading-indicator-button--loading'] = true;\n                }\n\n                if(vm.indicator.requests.length && vm.disableOnPendingRequest || vm.buttonDisabled) {\n                    classes['disabled'] = true;\n                }\n                \n                if(angular.isDefined(vm.indicatorPosition)) {\n                    classes['jdm-loading-indicator-button--loading-' + vm.indicatorPosition] = true;\n                } else {\n                    classes['jdm-loading-indicator-button--loading-' + loadingIndicator.position] = true;\n                }\n                \n                return classes;\n            };\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicatorContainer', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <div loading-indicator-container></div>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'A',\n            scope: {},\n            link: link\n        }; \n        \n        return directive;\n        \n        function link(scope, element, attrs) {\n            element[0].classList.add('jdm-loading-container');\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicator', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <loading-indicator></loading-indicator>\n        //\n        // Creates:\n        //\n        LoadingIndicatorController.$inject = [\"loadingIndicator\"];\n        var directive = {\n            restrict: 'E',\n            requires: '^loadingIndicatorContainer',\n            controller: LoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-inline.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function LoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('globalLoadingIndicator', GlobalLoadingIndicator);\n\n    GlobalLoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function GlobalLoadingIndicator() {\n        // Usage: <global-loading-indicator></global-loading-indicator>\n        //\n        // Creates:\n        //\n        GlobalLoadingIndicatorController.$inject = [\"loadingIndicator\"];\n        var directive = {\n            restrict: 'E',\n            controller: GlobalLoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-global.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function GlobalLoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .factory('loadingIndicatorInterceptor', LoadingIndicatorInterceptor);\n\n    LoadingIndicatorInterceptor.$inject = ['$q', '$templateCache', 'loadingIndicator', ];\n\n    function LoadingIndicatorInterceptor($q, $templateCache, loadingIndicator) {\n        return { \n            request: request,\n            response: response,\n            responseError: responseError \n        };\n\n        // Exposed Functions\n        function request(config) {\n            checkRequest(config);\n            return config;\n        }\n        \n        function response(response) {\n            checkResponse(response);\n            return response;\n        }\n        \n        function responseError(rejection) {\n            checkResponse(rejection);\n            return $q.reject(rejection);\n        }\n        \n        // Internal Functions\n        function checkResponse(response) {\n            if (response !== undefined) {\n                loadingIndicator.setLoadingState(false, response.config);\n            }\n        }\n\n        function checkRequest(config) {\n            // If the request is a get and the request url is not in $templateCache\n            if (config.method === 'GET') {\n                if ($templateCache.get(config.url) === undefined) {\n                    loadingIndicator.setLoadingState(true, config);\n                }\n            } else {\n                loadingIndicator.setLoadingState(true, config);\n            }\n        }  \n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .provider('loadingIndicator', LoadingIndicatorProvider);\n        \n    function LoadingIndicatorProvider() {\n        var referenceId = 0,\n            threshold = 100,\n            position = 'left';\n            \n        this.setDefaultReferenceId = function(defaultId) {\n            referenceId = defaultId;\n        };\n        \n        this.setDefaultPosition = function(defaultPosition) {\n            position = defaultPosition;\n        };\n        \n        this.setThreshold = function(defaultThreshold) {\n            threshold = defaultThreshold;\n        };\n\n        this.$get = LoadingIndicatorService;\n        \n        LoadingIndicatorService.$inject = ['$timeout', '$rootScope'];\n        \n        function LoadingIndicatorService($timeout, $rootScope) {            \n            var service = {\n                directives: {},\n                position: position,\n                initDirective: initDirective,\n                addLoadingState: addLoadingState,\n                deleteLoadingState: deleteLoadingState,\n                setLoadingState: setLoadingState\n            };\n            \n            return service;\n            \n            // Exposed Functions\n            function initDirective(referenceId) {\n                service.directives[referenceId] = service.directives[referenceId] || preLoad(referenceId);\n        \n                return service.directives[referenceId];\n            }\n            \n            function addLoadingState(data) {\n                var directive = service.directives[data.referenceId] || preLoad(data.referenceId);\n\n                if (data.isLoading) {\n                    if (typeof directive.requests === 'undefined') {\n                        directive.total = 0;\n                        directive.requests = [];\n                    }\n\n                    directive.total++;\n                    directive.requests.push(data);\n                    \n                    //Check by referenceID for broadcasts\n                    if(directive.requests.length === 1) {\n                        $rootScope.$emit('loadingIndicator:started', data);\n                    }\n                } else {\n                    for (var x = 0; x < directive.requests.length; x++) {\n                        //if the url's and referenceId's match, delete it\n                        if (directive.requests[x].url === data.url && directive.requests[x].referenceId === data.referenceId) {\n                            //We only want to destroy one request at a time, so break after\n                            directive.requests[x].destroy();\n                            directive.total--;\n                            break;\n                        }\n                    }\n                }\n\n                return data;\n            }\n\n            function deleteLoadingState(data) {\n                var requests = service.directives[data.referenceId].requests;\n                var index = requests.indexOf(data);\n                \n                if (index > -1) {\n                    requests.splice(index, 1);\n                }\n                \n                if(requests.length === 0) {\n                    $rootScope.$emit('loadingIndicator:stopped', data);\n                }\n            }\n            \n            function setLoadingState(isLoading, config) {\n                var _config = config || {};\n                \n                if (angular.isUndefined(isLoading)) {\n                    return;\n                }\n\n                var data = {\n                    isLoading: isLoading,\n                    url: _config.url,\n                    position: _config.position || position,\n                    referenceId: _config.referenceId || referenceId,\n                    destroy: function() {\n                        deleteLoadingState(data);\n                    }\n                };\n                                \n                return addLoadingState(data);\n            }\n            \n            function preLoad(referenceId) {\n                service.directives[referenceId] = {\n                    requests: [],\n                    total: 0\n                };\n                \n                return service.directives[referenceId];\n            }\n        }\n    }\n\n\n})();\nangular.module(\"jdm.loadingIndicator\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"templates/loading-indicator-button.tpl.html\",\"<button type=\\\"button\\\" class=\\\"jdm-loading-container jdm-loading-indicator-button\\\" ng-disabled=\\\"loadingIndicatorButton.checkDisabled()\\\" ng-class=\\\"loadingIndicatorButton.wrapperClasses()\\\"> \\n    <span class=\\\"jdm-loading-indicator-button__wrapper\\\">\\n        <span class=\\\"jdm-loading jdm-loading--button\\\" ng-if=\\\"loadingIndicatorButton.isLoading || loadingIndicatorButton.indicator.requests.length\\\"> \\n            <i class=\\\"jdm-loading__spinner jdm-loading__spinner--button\\\"></i>\\n        </span>\\n        \\n        <span class=\\\"jdm-loading-indicator-button__content\\\" ng-transclude></span>\\n    </span>\\n</button>\");\n$templateCache.put(\"templates/loading-indicator-global.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--global\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--global\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-inline.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--inline\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--inline\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-progress.tpl.html\",\"<span class=\\\"loading-container\\\"> \\n     <span class=\\\"loading-item\\\"> \\n         <progress max=\\\"{{ jdmLoadingService.directives[referenceId].total }}\\\" value=\\\"{{ jdmLoadingService.directives[referenceId].total - jdmLoadingService.directives[referenceId].messages.length }}\\\"></progress> \\n     </span>\\n</span>\\n\");}]);","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicatorContainer', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <div loading-indicator-container></div>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'A',\n            scope: {},\n            link: link\n        }; \n        \n        return directive;\n        \n        function link(scope, element, attrs) {\n            element[0].classList.add('jdm-loading-container');\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('loadingIndicator', LoadingIndicator);\n\n    LoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function LoadingIndicator() {\n        // Usage: <loading-indicator></loading-indicator>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'E',\n            requires: '^loadingIndicatorContainer',\n            controller: LoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-inline.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function LoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .directive('globalLoadingIndicator', GlobalLoadingIndicator);\n\n    GlobalLoadingIndicator.$inject = ['loadingIndicator'];\n    \n    function GlobalLoadingIndicator() {\n        // Usage: <global-loading-indicator></global-loading-indicator>\n        //\n        // Creates:\n        //\n        var directive = {\n            restrict: 'E',\n            controller: GlobalLoadingIndicatorController,\n            controllerAs: 'loadingIndicator', \n            bindToController: {\n                referenceId: '@',\n                isLoading: '='\n            },\n            scope: {},\n            templateUrl: 'templates/loading-indicator-global.tpl.html',\n        }; \n        \n        return directive;\n             \n        /* @ngInject */\n        function GlobalLoadingIndicatorController (loadingIndicator) {\n            var vm = this;\n            var referenceId = vm.referenceId || 0;\n\n            loadingIndicator.initDirective(referenceId);\n            \n            vm.indicator = loadingIndicator.directives[referenceId];\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .factory('loadingIndicatorInterceptor', LoadingIndicatorInterceptor);\n\n    LoadingIndicatorInterceptor.$inject = ['$q', '$templateCache', 'loadingIndicator', ];\n\n    function LoadingIndicatorInterceptor($q, $templateCache, loadingIndicator) {\n        return { \n            request: request,\n            response: response,\n            responseError: responseError \n        };\n\n        // Exposed Functions\n        function request(config) {\n            checkRequest(config);\n            return config;\n        }\n        \n        function response(response) {\n            checkResponse(response);\n            return response;\n        }\n        \n        function responseError(rejection) {\n            checkResponse(rejection);\n            return $q.reject(rejection);\n        }\n        \n        // Internal Functions\n        function checkResponse(response) {\n            if (response !== undefined) {\n                loadingIndicator.setLoadingState(false, response.config);\n            }\n        }\n\n        function checkRequest(config) {\n            // If the request is a get and the request url is not in $templateCache\n            if (config.method === 'GET') {\n                if ($templateCache.get(config.url) === undefined) {\n                    loadingIndicator.setLoadingState(true, config);\n                }\n            } else {\n                loadingIndicator.setLoadingState(true, config);\n            }\n        }  \n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('jdm.loadingIndicator')\n        .provider('loadingIndicator', LoadingIndicatorProvider);\n        \n    function LoadingIndicatorProvider() {\n        var referenceId = 0,\n            threshold = 100,\n            position = 'left';\n            \n        this.setDefaultReferenceId = function(defaultId) {\n            referenceId = defaultId;\n        };\n        \n        this.setDefaultPosition = function(defaultPosition) {\n            position = defaultPosition;\n        };\n        \n        this.setThreshold = function(defaultThreshold) {\n            threshold = defaultThreshold;\n        };\n\n        this.$get = LoadingIndicatorService;\n        \n        LoadingIndicatorService.$inject = ['$timeout', '$rootScope'];\n        \n        function LoadingIndicatorService($timeout, $rootScope) {            \n            var service = {\n                directives: {},\n                position: position,\n                initDirective: initDirective,\n                addLoadingState: addLoadingState,\n                deleteLoadingState: deleteLoadingState,\n                setLoadingState: setLoadingState\n            };\n            \n            return service;\n            \n            // Exposed Functions\n            function initDirective(referenceId) {\n                service.directives[referenceId] = service.directives[referenceId] || preLoad(referenceId);\n        \n                return service.directives[referenceId];\n            }\n            \n            function addLoadingState(data) {\n                var directive = service.directives[data.referenceId] || preLoad(data.referenceId);\n\n                if (data.isLoading) {\n                    if (typeof directive.requests === 'undefined') {\n                        directive.total = 0;\n                        directive.requests = [];\n                    }\n\n                    directive.total++;\n                    directive.requests.push(data);\n                    \n                    //Check by referenceID for broadcasts\n                    if(directive.requests.length === 1) {\n                        $rootScope.$emit('loadingIndicator:started', data);\n                    }\n                } else {\n                    for (var x = 0; x < directive.requests.length; x++) {\n                        //if the url's and referenceId's match, delete it\n                        if (directive.requests[x].url === data.url && directive.requests[x].referenceId === data.referenceId) {\n                            //We only want to destroy one request at a time, so break after\n                            directive.requests[x].destroy();\n                            directive.total--;\n                            break;\n                        }\n                    }\n                }\n\n                return data;\n            }\n\n            function deleteLoadingState(data) {\n                var requests = service.directives[data.referenceId].requests;\n                var index = requests.indexOf(data);\n                \n                if (index > -1) {\n                    requests.splice(index, 1);\n                }\n                \n                if(requests.length === 0) {\n                    $rootScope.$emit('loadingIndicator:stopped', data);\n                }\n            }\n            \n            function setLoadingState(isLoading, config) {\n                var _config = config || {};\n                \n                if (angular.isUndefined(isLoading)) {\n                    return;\n                }\n\n                var data = {\n                    isLoading: isLoading,\n                    url: _config.url,\n                    position: _config.position || position,\n                    referenceId: _config.referenceId || referenceId,\n                    destroy: function() {\n                        deleteLoadingState(data);\n                    }\n                };\n                                \n                return addLoadingState(data);\n            }\n            \n            function preLoad(referenceId) {\n                service.directives[referenceId] = {\n                    requests: [],\n                    total: 0\n                };\n                \n                return service.directives[referenceId];\n            }\n        }\n    }\n\n\n})();","angular.module(\"jdm.loadingIndicator\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"templates/loading-indicator-button.tpl.html\",\"<button type=\\\"button\\\" class=\\\"jdm-loading-container jdm-loading-indicator-button\\\" ng-disabled=\\\"loadingIndicatorButton.checkDisabled()\\\" ng-class=\\\"loadingIndicatorButton.wrapperClasses()\\\"> \\n    <span class=\\\"jdm-loading-indicator-button__wrapper\\\">\\n        <span class=\\\"jdm-loading jdm-loading--button\\\" ng-if=\\\"loadingIndicatorButton.isLoading || loadingIndicatorButton.indicator.requests.length\\\"> \\n            <i class=\\\"jdm-loading__spinner jdm-loading__spinner--button\\\"></i>\\n        </span>\\n        \\n        <span class=\\\"jdm-loading-indicator-button__content\\\" ng-transclude></span>\\n    </span>\\n</button>\");\n$templateCache.put(\"templates/loading-indicator-global.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--global\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--global\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-inline.tpl.html\",\"<span class=\\\"jdm-loading jdm-loading--inline\\\" ng-if=\\\"loadingIndicator.isLoading || loadingIndicator.indicator.requests.length\\\">\\n    <i class=\\\"jdm-loading__spinner jdm-loading__spinner--inline\\\"></i> \\n</span>\");\n$templateCache.put(\"templates/loading-indicator-progress.tpl.html\",\"<span class=\\\"loading-container\\\"> \\n     <span class=\\\"loading-item\\\"> \\n         <progress max=\\\"{{ jdmLoadingService.directives[referenceId].total }}\\\" value=\\\"{{ jdmLoadingService.directives[referenceId].total - jdmLoadingService.directives[referenceId].messages.length }}\\\"></progress> \\n     </span>\\n</span>\\n\");}]);"],"sourceRoot":"/source/"}